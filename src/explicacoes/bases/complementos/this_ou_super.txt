uso de this() e super() em Construtores Java
📌 Introdução
Ao estudar herança em Java, é comum precisar reutilizar ou complementar construtores da superclasse. 
Para isso, usamos duas palavras-chave muito importantes: super() e this(). Saber quando e como usá-las corretamente é essencial para criar hierarquias de classes bem estruturadas e reaproveitar código de forma eficiente.

🔹 super() – Chamando o Construtor da Superclasse

Serve para acessar o construtor da superclasse.
Deve ser usado na primeira linha do construtor da subclasse.
Útil quando a superclasse exige parâmetros no construtor.
Evita duplicação de código que já existe na superclasse.

public class Animal {
    public Animal(String nome) {
        System.out.println("Animal: " + nome);
    }
}

public class Cachorro extends Animal {
    public Cachorro(String nome) {
        super(nome); // chama o construtor da superclasse
    }
}

🔹 this() – Chamando Outro Construtor da Mesma Classe
Usado para chamar outro construtor dentro da mesma classe.

Também deve estar na primeira linha do construtor.

Facilita a sobreposição de construtores e a organização de lógica comum.

public class Cachorro extends Animal {
    public Cachorro() {
        this("Sem nome"); // chama o outro construtor da classe
    }

    public Cachorro(String nome) {
        super(nome); // chama a superclasse
    }
}

⚠️ Regras Importantes
this() e super() não podem ser usados juntos diretamente no mesmo construtor.
Apenas um deles pode aparecer, e sempre como primeira instrução do construtor.
Se this() for usado, ele pode indiretamente levar a um super() se for chamado em cadeia.

✅ Construtores na Herança
Se a superclasse não tem construtor padrão (sem parâmetros), a subclasse é obrigada a chamar super() com os argumentos esperados.
Isso é comum quando o construtor da superclasse realiza inicializações importantes que precisam ser mantidas.

💡 Sobrecarregando Construtores
É comum criar vários construtores com diferentes assinaturas (sobrecarga).
A sobrecarga ajuda a criar objetos com diferentes níveis de detalhe.

public class Pessoa {
    private String nome;
    private int idade;

    public Pessoa(String nome) {
        this(nome, 0); // chama outro construtor
    }

    public Pessoa(String nome, int idade) {
        this.nome = nome;
        this.idade = idade;
    }
}

🧠 Conclusão
O uso correto de super() e this() é essencial para trabalhar com herança, reutilização de código e clareza na construção de objetos. 
Entender suas diferenças e restrições ajuda a evitar erros comuns e a escrever código mais limpo e eficiente em Java.

